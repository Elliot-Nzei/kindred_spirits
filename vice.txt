vice_admin_dashboard.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vice Admin Dashboard - Metanoia</title>
    <link rel="stylesheet" href="../css/main.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom animations and styles */
        .animate-slide-up {
            animation: slideUp 0.3s ease-out forwards;
        }
        
        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .transition-colors {
            transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
        }
        
        /* Smooth scrolling for navigation */
        html {
            scroll-behavior: smooth;
        }
        
        /* Custom focus styles */
        .focus-ring:focus {
            outline: none;
            ring: 2px;
            ring-color: rgb(59 130 246);
            ring-offset: 2px;
        }
        
        /* Loading state */
        .loading {
            position: relative;
            overflow: hidden;
        }
        
        .loading::after {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
            animation: loading 1.5s infinite;
        }
        
        @keyframes loading {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        /* Hover effects */
        .hover-lift:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
        }
        
        /* Custom scrollbar */
        .custom-scrollbar::-webkit-scrollbar {
            width: 6px;
        }
        
        .custom-scrollbar::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        
        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 3px;
        }
        
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #a1a1a1;
        }
        
        /* Badge animations */
        .badge-pulse {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        
        @keyframes pulse {
            0%, 100% {
                opacity: 1;
            }
            50% {
                opacity: .5;
            }
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background-color: white;
            margin: auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
        }
    </style>
</head>
<body class="bg-gray-50 font-sans">
    <div class="flex h-screen bg-gray-100">
        <!-- Sidebar -->
        <aside class="w-64 bg-white shadow-lg flex flex-col">
            <div class="p-4 border-b border-gray-200 flex items-center space-x-3">
                <img src="../img/logo_only.jpg" alt="Metanoia Logo" class="w-10 h-10 rounded-full object-cover">
                <div>
                    <h1 class="text-lg font-semibold text-blue-600">Metanoia</h1>
                    <span class="text-sm text-gray-500">Vice-Admin Dashboard</span>
                </div>
            </div>
            
            <nav class="flex-1 p-4 space-y-2" role="navigation">
                <a href="#overview" class="nav-link flex items-center p-3 text-gray-700 bg-blue-50 rounded-lg font-medium transition-colors hover:bg-blue-100 focus-ring" aria-current="page">
                    <svg class="w-5 h-5 mr-3 text-blue-600" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                        <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
                    </svg>
                    <span>Overview</span>
                </a>
                
                <a href="#content-moderation" class="nav-link flex items-center p-3 text-gray-600 hover:bg-gray-100 hover:text-gray-900 rounded-lg transition-colors focus-ring">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                    <span>Content Moderation</span>
                </a>
                
                <a href="#practice-uploads" class="nav-link flex items-center p-3 text-gray-600 hover:bg-gray-100 hover:text-gray-900 rounded-lg transition-colors focus-ring">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"/>
                    </svg>
                    <span>Practice Uploads</span>
                </a>
                
                <a href="#workshops" class="nav-link flex items-center p-3 text-gray-600 hover:bg-gray-100 hover:text-gray-900 rounded-lg transition-colors focus-ring">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                    </svg>
                    <span>Workshops</span>
                </a>
                
                <a href="#daily-wisdom" class="nav-link flex items-center p-3 text-gray-600 hover:bg-gray-100 hover:text-gray-900 rounded-lg transition-colors focus-ring">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"/>
                    </svg>
                    <span>Daily Wisdom</span>
                </a>
                
                <a href="#user-support" class="nav-link flex items-center p-3 text-gray-600 hover:bg-gray-100 hover:text-gray-900 rounded-lg transition-colors focus-ring">
                    <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 5.636a9 9 0 010 12.728m0 0l-2.829-2.829m2.829 2.829L21 21M15.536 8.464a5 5 0 010 7.072m0 0l-2.829-2.829m-4.243 2.829a4.978 4.978 0 01-1.414-2.83m-1.414 5.658a9 9 0 01-2.167-9.238m7.824 2.167a1 1 0 111.414 1.414m-1.414-1.414L3 3"/>
                    </svg>
                    <span>User Support</span>
                </a>
            </nav>
            
            <div class="p-4 border-t border-gray-200 mt-auto">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-full flex items-center justify-center">
                        <span class="text-white font-semibold text-sm">VA</span>
                    </div>
                    <div>
                        <p class="font-medium text-gray-800">Vice-Admin</p>
                        <button data-logout class="text-sm text-red-500 hover:text-red-700 hover:underline transition-colors">
                            Logout
                        </button>
                    </div>
                </div>
            </div>
        </aside>

        <!-- Main Content -->
        <main class="flex-1 overflow-y-auto custom-scrollbar">
            <!-- Header -->
            <header id="overview" class="bg-white shadow-sm border-b border-gray-200 p-8">
                <div class="max-w-7xl mx-auto">
                    <h2 class="text-3xl font-bold text-gray-900">Vice-Admin Dashboard</h2>
                    <p class="text-gray-600 mt-2">Welcome. Your role is to assist the Master Admin and nurture the community.</p>
                </div>
            </header>

            <div class="p-8">
                <!-- Stats Cards -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8 max-w-7xl mx-auto">
                    <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100 hover-lift transition-all duration-300">
                        <div class="flex items-center justify-between">
                            <div>
                                <h3 class="text-sm font-medium text-gray-500">Pending Reports</h3>
                                <p id="pendingReports" class="text-3xl font-bold text-gray-900 mt-1">0</p>
                            </div>
                            <div class="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
                                <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.664-.833-2.464 0L4.268 16.5c-.77.833.192 2.5 1.732 2.5z"/>
                                </svg>
                            </div>
                        </div>
                    </div>
                    
                    <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100 hover-lift transition-all duration-300">
                        <div class="flex items-center justify-between">
                            <div>
                                <h3 class="text-sm font-medium text-gray-500">Resolved Today</h3>
                                <p id="resolvedToday" class="text-3xl font-bold text-gray-900 mt-1">0</p>
                            </div>
                            <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                                <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                </svg>
                            </div>
                        </div>
                    </div>
                    
                    <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100 hover-lift transition-all duration-300">
                        <div class="flex items-center justify-between">
                            <div>
                                <h3 class="text-sm font-medium text-gray-500">Total Posts</h3>
                                <p id="totalPosts" class="text-3xl font-bold text-gray-900 mt-1">0</p>
                            </div>
                            <div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                                <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"/>
                                </svg>
                            </div>
                        </div>
                    </div>
                    
                    <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100 hover-lift transition-all duration-300">
                        <div class="flex items-center justify-between">
                            <div>
                                <h3 class="text-sm font-medium text-gray-500">Active Users</h3>
                                <p id="activeUsers" class="text-3xl font-bold text-gray-900 mt-1">0</p>
                            </div>
                            <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                                <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"/>
                                </svg>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Content Moderation Section -->
                <div id="content-moderation" class="max-w-7xl mx-auto mb-8">
                    <div class="bg-white rounded-xl shadow-sm border border-gray-100">
                        <div class="px-8 py-6 border-b border-gray-100">
                            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                                <div>
                                    <h3 class="text-2xl font-bold text-gray-900">Daily Wisdom</h3>
                                    <p class="text-gray-600 mt-1">Manage daily wisdom content and suggestions</p>
                                </div>
                                <div class="mt-4 sm:mt-0">
                                    <button class="px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg transition-colors">
                                        <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                                        </svg>
                                        Add Wisdom
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="overflow-hidden">
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Content</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Author</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="dailyWisdomList" class="bg-white divide-y divide-gray-200">
                                        <tr>
                                            <td colspan="4" class="px-6 py-8 text-center text-gray-500">No daily wisdom entries found.</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- User Support Section -->
                <div id="user-support" class="max-w-7xl mx-auto mb-8">
                    <div class="bg-white rounded-xl shadow-sm border border-gray-100">
                        <div class="px-8 py-6 border-b border-gray-100">
                            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                                <div>
                                    <h3 class="text-2xl font-bold text-gray-900">User Support</h3>
                                    <p class="text-gray-600 mt-1">Manage user support tickets and inquiries</p>
                                </div>
                                <div class="mt-4 sm:mt-0 flex space-x-4">
                                    <div class="relative">
                                        <input 
                                            type="text" 
                                            id="user-support-search" 
                                            placeholder="Search tickets..." 
                                            class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                                        >
                                        <svg class="absolute left-3 top-2.5 w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                                        </svg>
                                    </div>
                                    <select id="user-support-filter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                        <option value="all">All Status</option>
                                        <option value="open">Open</option>
                                        <option value="pending">Pending</option>
                                        <option value="resolved">Resolved</option>
                                        <option value="closed">Closed</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="overflow-hidden">
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subject</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priority</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="userSupportList" class="bg-white divide-y divide-gray-200">
                                        <tr>
                                            <td colspan="6" class="px-6 py-8 text-center text-gray-500">No support tickets found.</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Modals -->
    <!-- Content Details Modal -->
    <div id="contentModal" class="modal">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h4 class="text-lg font-bold">Content Details</h4>
                <button class="close-modal text-gray-500 hover:text-gray-700">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
            <div id="contentModalBody">
                <!-- Content will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Upload Details Modal -->
    <div id="uploadModal" class="modal">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h4 class="text-lg font-bold">Upload Details</h4>
                <button class="close-modal text-gray-500 hover:text-gray-700">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
            <div id="uploadModalBody">
                <!-- Upload details will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Support Ticket Modal -->
    <div id="ticketModal" class="modal">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h4 class="text-lg font-bold">Support Ticket Details</h4>
                <button class="close-modal text-gray-500 hover:text-gray-700">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
            <div id="ticketModalBody">
                <!-- Ticket details will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Response Modal -->
    <div id="responseModal" class="modal">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h4 class="text-lg font-bold">Respond to Ticket</h4>
                <button class="close-modal text-gray-500 hover:text-gray-700">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
            <div id="responseModalBody">
                <form id="responseForm" class="space-y-4">
                    <div>
                        <label for="responseText" class="block text-sm font-medium text-gray-700">Response</label>
                        <textarea 
                            id="responseText" 
                            name="response" 
                            rows="6" 
                            class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                            placeholder="Enter your response..."
                            required
                        ></textarea>
                    </div>
                    <div class="flex justify-end space-x-3">
                        <button type="button" class="close-modal px-4 py-2 text-gray-700 bg-gray-200 hover:bg-gray-300 rounded-lg transition-colors">
                            Cancel
                        </button>
                        <button type="submit" class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors">
                            Send Response
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Workshop Creation Modal -->
    <div id="workshopModal" class="modal">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h4 class="text-lg font-bold">Create Workshop</h4>
                <button class="close-modal text-gray-500 hover:text-gray-700">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
            <div id="workshopModalBody">
                <form id="workshopForm" class="space-y-4">
                    <div>
                        <label for="workshopTitle" class="block text-sm font-medium text-gray-700">Workshop Title</label>
                        <input 
                            type="text" 
                            id="workshopTitle" 
                            name="title" 
                            class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                            required
                        >
                    </div>
                    <div>
                        <label for="workshopDescription" class="block text-sm font-medium text-gray-700">Description</label>
                        <textarea 
                            id="workshopDescription" 
                            name="description" 
                            rows="4" 
                            class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                        ></textarea>
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="workshopDate" class="block text-sm font-medium text-gray-700">Date</label>
                            <input 
                                type="date" 
                                id="workshopDate" 
                                name="date" 
                                class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                                required
                            >
                        </div>
                        <div>
                            <label for="workshopTime" class="block text-sm font-medium text-gray-700">Time</label>
                            <input 
                                type="time" 
                                id="workshopTime" 
                                name="time" 
                                class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                                required
                            >
                        </div>
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="workshopFacilitator" class="block text-sm font-medium text-gray-700">Facilitator</label>
                            <input 
                                type="text" 
                                id="workshopFacilitator" 
                                name="facilitator" 
                                class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                                required
                            >
                        </div>
                        <div>
                            <label for="workshopCapacity" class="block text-sm font-medium text-gray-700">Max Participants</label>
                            <input 
                                type="number" 
                                id="workshopCapacity" 
                                name="capacity" 
                                min="1" 
                                class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                            >
                        </div>
                    </div>
                    <div class="flex justify-end space-x-3">
                        <button type="button" class="close-modal px-4 py-2 text-gray-700 bg-gray-200 hover:bg-gray-300 rounded-lg transition-colors">
                            Cancel
                        </button>
                        <button type="submit" class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors">
                            Create Workshop
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Daily Wisdom Modal -->
    <div id="wisdomModal" class="modal">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h4 class="text-lg font-bold">Add Daily Wisdom</h4>
                <button class="close-modal text-gray-500 hover:text-gray-700">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
            <div id="wisdomModalBody">
                <form id="wisdomForm" class="space-y-4">
                    <div>
                        <label for="wisdomContent" class="block text-sm font-medium text-gray-700">Wisdom Content</label>
                        <textarea 
                            id="wisdomContent" 
                            name="content" 
                            rows="4" 
                            class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                            placeholder="Enter daily wisdom content..."
                            required
                        ></textarea>
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="wisdomAuthor" class="block text-sm font-medium text-gray-700">Author</label>
                            <input 
                                type="text" 
                                id="wisdomAuthor" 
                                name="author" 
                                class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                                placeholder="Author name"
                            >
                        </div>
                        <div>
                            <label for="wisdomDate" class="block text-sm font-medium text-gray-700">Date</label>
                            <input 
                                type="date" 
                                id="wisdomDate" 
                                name="date" 
                                class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                                required
                            >
                        </div>
                    </div>
                    <div class="flex justify-end space-x-3">
                        <button type="button" class="close-modal px-4 py-2 text-gray-700 bg-gray-200 hover:bg-gray-300 rounded-lg transition-colors">
                            Cancel
                        </button>
                        <button type="submit" class="px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg transition-colors">
                            Add Wisdom
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="../js/config.js"></script>
    <script src="../js/auth.js"></script>
    <script src="../js/vice_admin.js"></script>

    <script>
        // Modal functionality
        document.addEventListener('DOMContentLoaded', function() {
            const modals = document.querySelectorAll('.modal');
            const closeButtons = document.querySelectorAll('.close-modal');
            
            // Close modal function
            function closeModal(modal) {
                modal.classList.remove('active');
            }
            
            // Open modal function
            function openModal(modal) {
                modal.classList.add('active');
            }
            
            // Close button event listeners
            closeButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const modal = this.closest('.modal');
                    closeModal(modal);
                });
            });
            
            // Click outside to close
            modals.forEach(modal => {
                modal.addEventListener('click', function(e) {
                    if (e.target === modal) {
                        closeModal(modal);
                    }
                });
            });
            
            // ESC key to close
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    modals.forEach(modal => {
                        if (modal.classList.contains('active')) {
                            closeModal(modal);
                        }
                    });
                }
            });
            
            // Button event listeners for opening modals
            document.addEventListener('click', function(e) {
                // Workshop creation
                if (e.target.textContent.includes('Create Workshop')) {
                    openModal(document.getElementById('workshopModal'));
                }
                
                // Daily wisdom
                if (e.target.textContent.includes('Add Wisdom')) {
                    openModal(document.getElementById('wisdomModal'));
                }
                
                // View buttons
                if (e.target.classList.contains('view-upload-btn')) {
                    openModal(document.getElementById('uploadModal'));
                }
                
                if (e.target.classList.contains('view-ticket-btn')) {
                    openModal(document.getElementById('ticketModal'));
                }
                
                if (e.target.classList.contains('respond-ticket-btn')) {
                    openModal(document.getElementById('responseModal'));
                }
            });
        });
    </script>
</body>
</html>xl font-bold text-gray-900">Content Moderation Queue</h3>
                                    <p class="text-gray-600 mt-1">Review and moderate reported content</p>
                                </div>
                                <div class="mt-4 sm:mt-0 flex space-x-4">
                                    <div class="relative">
                                        <input 
                                            type="text" 
                                            id="content-moderation-search" 
                                            placeholder="Search reports..." 
                                            class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                                        >
                                        <svg class="absolute left-3 top-2.5 w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                                        </svg>
                                    </div>
                                    <select id="content-moderation-filter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                        <option value="all">All Status</option>
                                        <option value="pending">Pending</option>
                                        <option value="approved">Approved</option>
                                        <option value="rejected">Rejected</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="overflow-hidden">
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Content</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Reported By</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Reason</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="contentModerationList" class="bg-white divide-y divide-gray-200">
                                        <tr class="loading">
                                            <td colspan="6" class="px-6 py-4 text-center text-gray-500">Loading content reports...</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Practice Uploads Section -->
                <div id="practice-uploads" class="max-w-7xl mx-auto mb-8">
                    <div class="bg-white rounded-xl shadow-sm border border-gray-100">
                        <div class="px-8 py-6 border-b border-gray-100">
                            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                                <div>
                                    <h3 class="text-2xl font-bold text-gray-900">Practice Uploads</h3>
                                    <p class="text-gray-600 mt-1">Review and approve user practice submissions</p>
                                </div>
                                <div class="mt-4 sm:mt-0 flex space-x-4">
                                    <div class="relative">
                                        <input 
                                            type="text" 
                                            id="practice-uploads-search" 
                                            placeholder="Search uploads..." 
                                            class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                                        >
                                        <svg class="absolute left-3 top-2.5 w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                                        </svg>
                                    </div>
                                    <select id="practice-uploads-filter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                        <option value="all">All Status</option>
                                        <option value="pending">Pending</option>
                                        <option value="approved">Approved</option>
                                        <option value="rejected">Rejected</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="overflow-hidden">
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Uploaded By</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="practiceUploadsList" class="bg-white divide-y divide-gray-200">
                                        <tr>
                                            <td colspan="6" class="px-6 py-8 text-center text-gray-500">No practice uploads found.</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Workshops Section -->
                <div id="workshops" class="max-w-7xl mx-auto mb-8">
                    <div class="bg-white rounded-xl shadow-sm border border-gray-100">
                        <div class="px-8 py-6 border-b border-gray-100">
                            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                                <div>
                                    <h3 class="text-2xl font-bold text-gray-900">Workshops Management</h3>
                                    <p class="text-gray-600 mt-1">Manage community workshops and events</p>
                                </div>
                                <div class="mt-4 sm:mt-0 flex space-x-4">
                                    <div class="relative">
                                        <input 
                                            type="text" 
                                            id="workshops-search" 
                                            placeholder="Search workshops..." 
                                            class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                                        >
                                        <svg class="absolute left-3 top-2.5 w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                                        </svg>
                                    </div>
                                    <button class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors">
                                        <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                                        </svg>
                                        Create Workshop
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="overflow-hidden">
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Facilitator</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Participants</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="workshopsList" class="bg-white divide-y divide-gray-200">
                                        <tr>
                                            <td colspan="5" class="px-6 py-8 text-center text-gray-500">No workshops found.</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Daily Wisdom Section -->
                <div id="daily-wisdom" class="max-w-7xl mx-auto mb-8">
                    <div class="bg-white rounded-xl shadow-sm border border-gray-100">
                        <div class="px-8 py-6 border-b border-gray-100">
                            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                                <div>
                                    <h3 class="text-2






vice_admin.js
document.addEventListener('DOMContentLoaded', () => {
    console.log('vice_admin.js: DOMContentLoaded fired.');
    
    // DOM Elements
    const elements = {
        stats: {
            pendingReports: document.getElementById('pendingReports'),
            resolvedToday: document.getElementById('resolvedToday'),
            totalPosts: document.getElementById('totalPosts'),
            activeUsers: document.getElementById('activeUsers')
        },
        lists: {
            contentModerationList: document.getElementById('contentModerationList'),
            practiceUploadsList: document.getElementById('practiceUploadsList'),
            workshopsList: document.getElementById('workshopsList'),
            dailyWisdomList: document.getElementById('dailyWisdomList'),
            userSupportList: document.getElementById('userSupportList')
        },
        searchInputs: {
            contentModeration: document.getElementById('content-moderation-search'),
            practiceUploads: document.getElementById('practice-uploads-search'),
            workshops: document.getElementById('workshops-search'),
            userSupport: document.getElementById('user-support-search')
        },
        filters: {
            contentModerationFilter: document.getElementById('content-moderation-filter'),
            practiceUploadsFilter: document.getElementById('practice-uploads-filter'),
            userSupportFilter: document.getElementById('user-support-filter')
        }
    };

    // State management
    let data = {
        contentReports: [],
        practiceUploads: [],
        workshops: [],
        dailyWisdom: [],
        userSupport: []
    };

    let filteredData = {
        contentReports: [],
        practiceUploads: [],
        userSupport: []
    };

    // --- Toast Notification ---
    function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        const bgColor = type === 'error' ? 'bg-red-500' : type === 'warning' ? 'bg-yellow-500' : 'bg-green-500';
        toast.className = `fixed bottom-4 right-4 ${bgColor} text-white px-4 py-2 rounded-lg z-50 shadow-lg transition-opacity duration-300`;
        toast.textContent = message;
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.style.opacity = '0';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }

    // --- API Functions ---
    async function fetchStats() {
        console.log('vice_admin.js: fetchStats called.');
        try {
            const response = await AuthAPI.request(`/api/vice-admin/stats?_t=${new Date().getTime()}`);
            if (!response.ok) throw new Error('Failed to fetch stats');
            
            const stats = await response.json();
            if (elements.stats.pendingReports) elements.stats.pendingReports.textContent = stats.pending_reports || '0';
            if (elements.stats.resolvedToday) elements.stats.resolvedToday.textContent = stats.resolved_today || '0';
            if (elements.stats.totalPosts) elements.stats.totalPosts.textContent = stats.total_posts || '0';
            if (elements.stats.activeUsers) elements.stats.activeUsers.textContent = stats.active_users || '0';
        } catch (error) {
            console.error('vice_admin.js: Error in fetchStats:', error.message);
            showToast('Failed to load statistics', 'error');
        }
    }

    async function fetchContentReports() {
        console.log('vice_admin.js: fetchContentReports called.');
        try {
            const response = await AuthAPI.request(`/api/vice-admin/content-reports?_t=${new Date().getTime()}`);
            if (!response.ok) throw new Error('Failed to fetch content reports');
            
            data.contentReports = await response.json();
            filteredData.contentReports = data.contentReports;
            renderContentReports(data.contentReports);
        } catch (error) {
            console.error('vice_admin.js: Error in fetchContentReports:', error.message);
            showError(elements.lists.contentModerationList, 'Failed to load content reports');
        }
    }

    async function fetchPracticeUploads() {
        console.log('vice_admin.js: fetchPracticeUploads called.');
        try {
            const response = await AuthAPI.request(`/api/vice-admin/practice-uploads?_t=${new Date().getTime()}`);
            if (!response.ok) throw new Error('Failed to fetch practice uploads');
            
            data.practiceUploads = await response.json();
            filteredData.practiceUploads = data.practiceUploads;
            renderPracticeUploads(data.practiceUploads);
        } catch (error) {
            console.error('vice_admin.js: Error in fetchPracticeUploads:', error.message);
            showError(elements.lists.practiceUploadsList, 'Failed to load practice uploads');
        }
    }

    async function fetchWorkshops() {
        console.log('vice_admin.js: fetchWorkshops called.');
        try {
            const response = await AuthAPI.request(`/api/vice-admin/workshops?_t=${new Date().getTime()}`);
            if (!response.ok) throw new Error('Failed to fetch workshops');
            
            data.workshops = await response.json();
            renderWorkshops(data.workshops);
        } catch (error) {
            console.error('vice_admin.js: Error in fetchWorkshops:', error.message);
            showError(elements.lists.workshopsList, 'Failed to load workshops');
        }
    }

    async function fetchDailyWisdom() {
        console.log('vice_admin.js: fetchDailyWisdom called.');
        try {
            const response = await AuthAPI.request(`/api/vice-admin/daily-wisdom?_t=${new Date().getTime()}`);
            if (!response.ok) throw new Error('Failed to fetch daily wisdom');
            
            data.dailyWisdom = await response.json();
            renderDailyWisdom(data.dailyWisdom);
        } catch (error) {
            console.error('vice_admin.js: Error in fetchDailyWisdom:', error.message);
            showError(elements.lists.dailyWisdomList, 'Failed to load daily wisdom');
        }
    }

    async function fetchUserSupport() {
        console.log('vice_admin.js: fetchUserSupport called.');
        try {
            const response = await AuthAPI.request(`/api/vice-admin/user-support?_t=${new Date().getTime()}`);
            if (!response.ok) throw new Error('Failed to fetch user support tickets');
            
            data.userSupport = await response.json();
            filteredData.userSupport = data.userSupport;
            renderUserSupport(data.userSupport);
        } catch (error) {
            console.error('vice_admin.js: Error in fetchUserSupport:', error.message);
            showError(elements.lists.userSupportList, 'Failed to load support tickets');
        }
    }

    // --- Action Functions ---
    async function moderateContent(reportId, action, reason = '') {
        try {
            const response = await AuthAPI.request('/api/vice-admin/moderate-content', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ reportId, action, reason })
            });

            if (!response.ok) throw new Error('Failed to moderate content');
            
            showToast(`Content ${action === 'approve' ? 'approved' : 'removed'} successfully`);
            fetchContentReports();
            fetchStats();
        } catch (error) {
            console.error('Error moderating content:', error);
            showToast('Failed to moderate content', 'error');
        }
    }

    async function approvePracticeUpload(uploadId) {
        try {
            const response = await AuthAPI.request('/api/vice-admin/approve-upload', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ uploadId })
            });

            if (!response.ok) throw new Error('Failed to approve upload');
            
            showToast('Practice upload approved successfully');
            fetchPracticeUploads();
        } catch (error) {
            console.error('Error approving upload:', error);
            showToast('Failed to approve upload', 'error');
        }
    }

    async function rejectPracticeUpload(uploadId, reason) {
        try {
            const response = await AuthAPI.request('/api/vice-admin/reject-upload', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ uploadId, reason })
            });

            if (!response.ok) throw new Error('Failed to reject upload');
            
            showToast('Practice upload rejected');
            fetchPracticeUploads();
        } catch (error) {
            console.error('Error rejecting upload:', error);
            showToast('Failed to reject upload', 'error');
        }
    }

    async function respondToSupport(ticketId, response) {
        try {
            const apiResponse = await AuthAPI.request('/api/vice-admin/respond-support', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ ticketId, response })
            });

            if (!apiResponse.ok) throw new Error('Failed to respond to support ticket');
            
            showToast('Support response sent successfully');
            fetchUserSupport();
        } catch (error) {
            console.error('Error responding to support:', error);
            showToast('Failed to send response', 'error');
        }
    }

    // --- Utility Functions ---
    function showError(listElement, message) {
        if (listElement) {
            listElement.innerHTML = `<tr><td colspan="5" class="text-center py-4 text-red-500">${message}</td></tr>`;
        }
    }

    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
    }

    function getPriorityBadge(priority) {
        const priorityMap = {
            'high': 'bg-red-100 text-red-800',
            'medium': 'bg-yellow-100 text-yellow-800',
            'low': 'bg-green-100 text-green-800'
        };
        return `<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${priorityMap[priority] || 'bg-gray-100 text-gray-800'}">${priority || 'Normal'}</span>`;
    }

    function getStatusBadge(status) {
        const statusMap = {
            'pending': 'bg-yellow-100 text-yellow-800',
            'approved': 'bg-green-100 text-green-800',
            'rejected': 'bg-red-100 text-red-800',
            'resolved': 'bg-blue-100 text-blue-800',
            'open': 'bg-yellow-100 text-yellow-800',
            'closed': 'bg-gray-100 text-gray-800'
        };
        return `<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusMap[status] || 'bg-gray-100 text-gray-800'}">${status || 'Unknown'}</span>`;
    }

    // --- Render Functions ---
    function renderContentReports(reports) {
        const listElement = elements.lists.contentModerationList;
        if (!listElement) return;

        if (!reports || reports.length === 0) {
            listElement.innerHTML = '<tr><td colspan="6" class="px-6 py-8 text-center text-gray-500">No content reports found.</td></tr>';
            return;
        }

        listElement.innerHTML = reports.map(report => `
            <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 text-sm text-gray-900">${report.content_type || 'Post'}</td>
                <td class="px-6 py-4 text-sm text-gray-600 max-w-xs truncate" title="${report.content || ''}">${report.content || 'N/A'}</td>
                <td class="px-6 py-4 text-sm text-gray-600">${report.reported_by || 'Anonymous'}</td>
                <td class="px-6 py-4 text-sm text-gray-600">${report.reason || 'No reason provided'}</td>
                <td class="px-6 py-4 text-sm">${getStatusBadge(report.status)}</td>
                <td class="px-6 py-4 text-sm">
                    ${report.status === 'pending' ? `
                    <div class="flex space-x-2">
                        <button class="approve-content-btn px-3 py-1 bg-green-500 hover:bg-green-600 text-white text-xs rounded transition-colors" data-id="${report.id}">
                            Approve
                        </button>
                        <button class="reject-content-btn px-3 py-1 bg-red-500 hover:bg-red-600 text-white text-xs rounded transition-colors" data-id="${report.id}">
                            Remove
                        </button>
                    </div>
                    ` : '<span class="text-gray-500 text-xs">Resolved</span>'}
                </td>
            </tr>
        `).join('');
    }

    function renderPracticeUploads(uploads) {
        const listElement = elements.lists.practiceUploadsList;
        if (!listElement) return;

        if (!uploads || uploads.length === 0) {
            listElement.innerHTML = '<tr><td colspan="6" class="px-6 py-8 text-center text-gray-500">No practice uploads found.</td></tr>';
            return;
        }

        listElement.innerHTML = uploads.map(upload => `
            <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 text-sm text-gray-900">${upload.title || 'Untitled'}</td>
                <td class="px-6 py-4 text-sm text-gray-600">${upload.uploaded_by || 'Anonymous'}</td>
                <td class="px-6 py-4 text-sm text-gray-600">${upload.type || 'Unknown'}</td>
                <td class="px-6 py-4 text-sm text-gray-600">${formatDate(upload.created_at)}</td>
                <td class="px-6 py-4 text-sm">${getStatusBadge(upload.status)}</td>
                <td class="px-6 py-4 text-sm">
                    ${upload.status === 'pending' ? `
                    <div class="flex space-x-2">
                        <button class="approve-upload-btn px-3 py-1 bg-green-500 hover:bg-green-600 text-white text-xs rounded transition-colors" data-id="${upload.id}">
                            Approve
                        </button>
                        <button class="reject-upload-btn px-3 py-1 bg-red-500 hover:bg-red-600 text-white text-xs rounded transition-colors" data-id="${upload.id}">
                            Reject
                        </button>
                        <button class="view-upload-btn px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white text-xs rounded transition-colors" data-id="${upload.id}">
                            View
                        </button>
                    </div>
                    ` : '<span class="text-gray-500 text-xs">Processed</span>'}
                </td>
            </tr>
        `).join('');
    }

    function renderWorkshops(workshops) {
        const listElement = elements.lists.workshopsList;
        if (!listElement) return;

        if (!workshops || workshops.length === 0) {
            listElement.innerHTML = '<tr><td colspan="5" class="px-6 py-8 text-center text-gray-500">No workshops found.</td></tr>';
            return;
        }

        listElement.innerHTML = workshops.map(workshop => `
            <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 text-sm font-medium text-gray-900">${workshop.title || 'Untitled Workshop'}</td>
                <td class="px-6 py-4 text-sm text-gray-600">${workshop.facilitator || 'TBD'}</td>
                <td class="px-6 py-4 text-sm text-gray-600">${formatDate(workshop.scheduled_date)}</td>
                <td class="px-6 py-4 text-sm text-gray-600">${workshop.participants || 0} / ${workshop.max_participants || '∞'}</td>
                <td class="px-6 py-4 text-sm">
                    <div class="flex space-x-2">
                        <button class="edit-workshop-btn px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white text-xs rounded transition-colors" data-id="${workshop.id}">
                            Edit
                        </button>
                        <button class="view-participants-btn px-3 py-1 bg-green-500 hover:bg-green-600 text-white text-xs rounded transition-colors" data-id="${workshop.id}">
                            Participants
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');
    }

    function renderDailyWisdom(wisdom) {
        const listElement = elements.lists.dailyWisdomList;
        if (!listElement) return;

        if (!wisdom || wisdom.length === 0) {
            listElement.innerHTML = '<tr><td colspan="4" class="px-6 py-8 text-center text-gray-500">No daily wisdom entries found.</td></tr>';
            return;
        }

        listElement.innerHTML = wisdom.map(item => `
            <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 text-sm text-gray-600">${formatDate(item.date)}</td>
                <td class="px-6 py-4 text-sm text-gray-900 max-w-md truncate" title="${item.content || ''}">${item.content || 'No content'}</td>
                <td class="px-6 py-4 text-sm text-gray-600">${item.author || 'Anonymous'}</td>
                <td class="px-6 py-4 text-sm">
                    <div class="flex space-x-2">
                        <button class="edit-wisdom-btn px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white text-xs rounded transition-colors" data-id="${item.id}">
                            Edit
                        </button>
                        <button class="delete-wisdom-btn px-3 py-1 bg-red-500 hover:bg-red-600 text-white text-xs rounded transition-colors" data-id="${item.id}">
                            Delete
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');
    }

    function renderUserSupport(tickets) {
        const listElement = elements.lists.userSupportList;
        if (!listElement) return;

        if (!tickets || tickets.length === 0) {
            listElement.innerHTML = '<tr><td colspan="6" class="px-6 py-8 text-center text-gray-500">No support tickets found.</td></tr>';
            return;
        }

        listElement.innerHTML = tickets.map(ticket => `
            <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 text-sm text-gray-900">${ticket.subject || 'No Subject'}</td>
                <td class="px-6 py-4 text-sm text-gray-600">${ticket.user || 'Anonymous'}</td>
                <td class="px-6 py-4 text-sm">${getPriorityBadge(ticket.priority)}</td>
                <td class="px-6 py-4 text-sm">${getStatusBadge(ticket.status)}</td>
                <td class="px-6 py-4 text-sm text-gray-600">${formatDate(ticket.created_at)}</td>
                <td class="px-6 py-4 text-sm">
                    ${ticket.status === 'open' ? `
                    <div class="flex space-x-2">
                        <button class="view-ticket-btn px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white text-xs rounded transition-colors" data-id="${ticket.id}">
                            View
                        </button>
                        <button class="respond-ticket-btn px-3 py-1 bg-green-500 hover:bg-green-600 text-white text-xs rounded transition-colors" data-id="${ticket.id}">
                            Respond
                        </button>
                    </div>
                    ` : '<span class="text-gray-500 text-xs">Closed</span>'}
                </td>
            </tr>
        `).join('');
    }

    // --- Search and Filter Functions ---
    function filterContentReports(query, status) {
        let filtered = data.contentReports;
        
        if (query) {
            filtered = filtered.filter(report => 
                (report.content && report.content.toLowerCase().includes(query.toLowerCase())) ||
                (report.reported_by && report.reported_by.toLowerCase().includes(query.toLowerCase())) ||
                (report.reason && report.reason.toLowerCase().includes(query.toLowerCase()))
            );
        }
        
        if (status && status !== 'all') {
            filtered = filtered.filter(report => report.status === status);
        }
        
        renderContentReports(filtered);
    }

    function filterPracticeUploads(query, status) {
        let filtered = data.practiceUploads;
        
        if (query) {
            filtered = filtered.filter(upload => 
                (upload.title && upload.title.toLowerCase().includes(query.toLowerCase())) ||
                (upload.uploaded_by && upload.uploaded_by.toLowerCase().includes(query.toLowerCase())) ||
                (upload.type && upload.type.toLowerCase().includes(query.toLowerCase()))
            );
        }
        
        if (status && status !== 'all') {
            filtered = filtered.filter(upload => upload.status === status);
        }
        
        renderPracticeUploads(filtered);
    }

    function filterUserSupport(query, status) {
        let filtered = data.userSupport;
        
        if (query) {
            filtered = filtered.filter(ticket => 
                (ticket.subject && ticket.subject.toLowerCase().includes(query.toLowerCase())) ||
                (ticket.user && ticket.user.toLowerCase().includes(query.toLowerCase()))
            );
        }
        
        if (status && status !== 'all') {
            filtered = filtered.filter(ticket => ticket.status === status);
        }
        
        renderUserSupport(filtered);
    }

    // --- Event Handlers ---
    function attachEventListeners() {
        // Search functionality
        if (elements.searchInputs.contentModeration) {
            elements.searchInputs.contentModeration.addEventListener('input', (e) => {
                const status = elements.filters.contentModerationFilter?.value || 'all';
                filterContentReports(e.target.value, status);
            });
        }

        if (elements.searchInputs.practiceUploads) {
            elements.searchInputs.practiceUploads.addEventListener('input', (e) => {
                const status = elements.filters.practiceUploadsFilter?.value || 'all';
                filterPracticeUploads(e.target.value, status);
            });
        }

        if (elements.searchInputs.userSupport) {
            elements.searchInputs.userSupport.addEventListener('input', (e) => {
                const status = elements.filters.userSupportFilter?.value || 'all';
                filterUserSupport(e.target.value, status);
            });
        }

        // Filter functionality
        if (elements.filters.contentModerationFilter) {
            elements.filters.contentModerationFilter.addEventListener('change', (e) => {
                const query = elements.searchInputs.contentModeration?.value || '';
                filterContentReports(query, e.target.value);
            });
        }

        if (elements.filters.practiceUploadsFilter) {
            elements.filters.practiceUploadsFilter.addEventListener('change', (e) => {
                const query = elements.searchInputs.practiceUploads?.value || '';
                filterPracticeUploads(query, e.target.value);
            });
        }

        if (elements.filters.userSupportFilter) {
            elements.filters.userSupportFilter.addEventListener('change', (e) => {
                const query = elements.searchInputs.userSupport?.value || '';
                filterUserSupport(query, e.target.value);
            });
        }

        // Content moderation actions
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('approve-content-btn')) {
                const reportId = parseInt(e.target.dataset.id);
                if (confirm('Are you sure you want to approve this content?')) {
                    moderateContent(reportId, 'approve');
                }
            }

            if (e.target.classList.contains('reject-content-btn')) {
                const reportId = parseInt(e.target.dataset.id);
                const reason = prompt('Please provide a reason for rejection:');
                if (reason !== null) {
                    moderateContent(reportId, 'reject', reason);
                }
            }

            if (e.target.classList.contains('approve-upload-btn')) {
                const uploadId = parseInt(e.target.dataset.id);
                if (confirm('Are you sure you want to approve this upload?')) {
                    approvePracticeUpload(uploadId);
                }
            }

            if (e.target.classList.contains('reject-upload-btn')) {
                const uploadId = parseInt(e.target.dataset.id);
                const reason = prompt('Please provide a reason for rejection:');
                if (reason !== null) {
                    rejectPracticeUpload(uploadId, reason);
                }
            }

            if (e.target.classList.contains('respond-ticket-btn')) {
                const ticketId = parseInt(e.target.dataset.id);
                const response = prompt('Enter your response to this support ticket:');
                if (response !== null && response.trim()) {
                    respondToSupport(ticketId, response.trim());
                }
            }
        });

        // Navigation
        const navLinks = document.querySelectorAll('aside nav a[href^="#"]');
        navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const targetId = link.getAttribute('href').substring(1);
                const targetElement = document.getElementById(targetId);
                
                if (targetElement) {
                    targetElement.scrollIntoView({ behavior: 'smooth' });
                    
                    // Update active nav item
                    navLinks.forEach(l => {
                        l.classList.remove('bg-blue-50', 'font-medium', 'text-gray-700');
                        l.classList.add('text-gray-600');
                    });
                    link.classList.remove('text-gray-600');
                    link.classList.add('bg-blue-50', 'font-medium', 'text-gray-700');
                }
            });
        });

        // Logout functionality
        const logoutBtn = document.querySelector('[data-logout]');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', (e) => {
                e.preventDefault();
                if (confirm('Are you sure you want to logout?')) {
                    AuthAPI.logout();
                    window.location.href = '../index.html';
                }
            });
        }
    }

    // --- Initialization ---
    function initialize() {
        console.log('vice_admin.js: initialize called.');
        
        // Setup event listeners
        attachEventListeners();
        
        // Load initial data
        fetchStats();
        fetchContentReports();
        fetchPracticeUploads();
        fetchWorkshops();
        fetchDailyWisdom();
        fetchUserSupport();
    }

    // Start the application
    initialize();
});